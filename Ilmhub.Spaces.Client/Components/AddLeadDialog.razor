@using Ilmhub.Spaces.Client.Models

@implements IDialogContentComponent<Lead>

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.PersonAdd())" />
        <FluentLabel Typo="Typography.PaneHeader">
            Add New Lead
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentTextField @bind-Value="@Content.Name" Placeholder="Name" />
        <FluentTextField @bind-Value="@Content.Phone" Placeholder="Phone" />
        <FluentSelect TOption="string" @bind-Value="@selectedSource" Placeholder="Source">
            @foreach (LeadSource source in Enum.GetValues(typeof(LeadSource)))
            {
                <FluentOption Value="@source.ToString()">@source.ToString()</FluentOption>
            }
        </FluentSelect>
    </FluentStack>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync">Save</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>

@code {
    [Parameter]
    public Lead Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public EventCallback<Lead> OnSave { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private string selectedSource = string.Empty;

    protected override void OnInitialized()
    {
        selectedSource = Content!.Source!.ToString();
    }

    private async Task SaveAsync()
    {
        Content.Source = Enum.Parse<LeadSource>(selectedSource);
        await OnSave.InvokeAsync(Content);
        await Dialog.CloseAsync(Content);
    }

    private async Task CancelAsync()
    {
        await OnCancel.InvokeAsync();
        await Dialog.CancelAsync();
    }
}
